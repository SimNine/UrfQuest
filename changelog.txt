0.1.0 - 2/2/16
-Created something of a 2D rendering system
--Renders a grid which is randomly generated of three different types of tiles: dirt, grass, rock
--Always renders with the GameCenter in the center of the screen
--Window is resizable, so that only the blocks that would fit on the screen at any time are rendered.
-Four different types of coordinates:
--GameCenter: the exact position (a decimal double) of the cursor
--GameCenterBlock: the block that the cursor is currently on
--DisplayCenter: the center of the QuestPanel relative to top-left (in terms of pixels)
--DisplayBlockDimensions: the dimensions of the QuestPanel (in terms of tiles)
-A timer goes off every 5ms:
--Redraws the panel based on the current coordinates and dimensions
--Checks what arrow keys are pressed down, moving the cursor appropriately
-Whenever an arrow key is pressed, it is added to an array of keys. Whenever released, it is removed.
-Status panel in upper-left corner displays all four coordinates

0.2.0 - 2/5/16
-Split up the game's logic and its display into separate components (questPanel --> questGame + questPanel)
-Split the GamePanel rendering into several different methods:
--drawBoard(g)
--drawStatus(g)
--drawCursor(g)
-Optimized drawBoard(g) to use temporary variables instead of reiterating through computations for each tile
-Removed the black edges from each tile
-The cursor can no longer enter stone or null tiles
-The movement-per-tick of the cursor is now constrained to a variable "speed" in questGame
-Movement of the curson in each direction is now constrained to a method "attemptMove()"

0.3.0 - 2/8/16
-Created procedurally generated "character" sprite (placeholder) that looks like an arrow
-Created a new class "StatusBar", customizable with color, max value, and of course, scale
-Added two StatusBars, one for "mana" and one for "health"
-Added four new blocks, one which increases speed, one which increases mana, one that increases health, one that drains all three
-Added a new method in QuestGame to react to the block the player is currently on

0.4.0 - 2/10/16
-Completely restructured the game using a new game design pattern; all global variables are public static
-Added an Entity class, designed to represent other creatures (and potentially the player too)
-The game and the display are now sent separate ticks; the game is sent a tick first
-Entites' logic and drawing are iterated through by putting them into an ArrayList
-Entities are now generated by QuestMap's constructor
-The framework for making different types of entities is now in place
-Entities' logic is now a rudimentary 2D physics simulation
-Entity's constructor now allows for its position, size, and color

0.4.1 - 8/9/16
-Removed the need for a "player tile position" global variable
-Level loader no longer saves player facings
-Replaced integer-based directional facings with string-based
-Separated entities' physics getters and setters into pos, vel, and acc

0.4.2 - 8/10/16
-Made the player a subclass of entity
-Deglobalized all player-related variables; they are now accessed through the player entity
-Fixed debugging graphics appearing even when V.debug was false
NOTE: MapLoader is completely fucked

0.5.0 - 8/16/16
-Completely replaced hardcoded "player" with player entity
-Player no longer converts grass to dirt
-Replaced all tile and entity procedurally drawn graphics with .png images
-New bug? game now lags considerably (might be due to running on battery power)

0.6.0 - 11/22/16
-Again, major restructuring of the game: all global variables are now accessed through the main class
-Added support for multiple maps per game
-Added new Tree tile
-Began adding a rudimentary sound engine
-Consolidated rendering of tiles and tile properties into Tiles class, using boolean "properties" array
-Put all assets (pictures, sounds) into new "assets" folder and updated paths accordingly
-MapLoader is still fucked, so are the Shape, Ball, and Square entity classes

0.7.0 - 11/22/16
-Imported menu GUI from Arcanists Clone 0.1.0 project
-Enabled pause menu and main menu
-Added unwalkable water tile
-Added new map generation method using simplex noise; simplex noise generator taken from: 
	http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf
	This method has been modified to provide a different result every time by permuting the "perm[]" array
-Player is now placed in an automatically generated open area with no trees
-Gameplay GUI (status bars, etc) is hidden while in menus
	
0.7.1 - 11/22/16
-Player's graphics are now initialized the same way as tiles and sounds
-All graphics are now imported using an input stream sourced at the main class,
	allowing importing to work properly when in runnable jar form
-The running instance of the main class is now accessible at UrfQuest.quest

0.7.2 - 11/23/16
-MapLoader renamed Loader, and has been fixed
-Loader can now be used through GUI menus
-Walking off the edge of the map no longer crashes the game, it simply becomes impassable
-The edge of the map additionally has an automatically generated border wall
-Extra getters/setters added to QuestGame in order to facilitate loading and saving
-Work begun on a minimap

0.8.0 - 11/24/16
-Player entity's images are now loaded into arrays, not loaded individually
-Added Item abstract class for item representation
-Added Key item
-Images and graphics are now initialized BEFORE top classes are initialized in UrfQuest class
-Removed posX and posY variables from entities, they are now contained within its "bounds" object
-The player now uses a "fake" position to determine tile collisions (its actual position +0.5 on each axis,
	but will use its actual position to determine collision with objects and entities.
	This will get confusing; look for solution
-Added basics of collision detection in QuestMap class; player-key collisions are detected
-Added keyCounter GUI
-Added options menu feature to toggle debug mode

0.8.1 - 11/25/16
-Fixed Loader; it now saves and loads the locations of keys

0.9.0 - 12/9/16
-Added a minimap; it can be easily changed in size by modifying mapWidth and mapHeight in the drawMinimap(g) method
-Added Tiles.minimapColor(t) which gets the color to be shown on the minimap for a certain type of tile
-Added functions to cycle through minimap size multipliers and zoom multipliers
-Added keyListener to listen for keypress of Z, which toggles map zoom, and X, which toggles map size

0.10.0 - 12/24/16
(The Efficiency Update)
-Added Huffman compression for map saves
--Created a new utility library
--Added a modified Huffman compressor (from CIS 121) to utility library
--Added a binary reader and writer from Princeton's standard library to utility library
	This was necessary to write single bits to file
--Huffman might not be necessary; generating the encoding map takes the vast majority of time
	It might be a better idea to use predetermined values for common tiles
-Reimplemented minimap more efficiently
--Only one zoom level of minimap
--Minimap is now generated after initialization of map
--Minimap is cropped accordingly on draw
--Drawback: must re-render minimap every time the map changes, must be done manually
-Disabled keypress of S for saving and L for loading
-Switched movement keys to WASD

0.10.1 - 12/24/16
-Fixed bug where the minimap didn't regenerate after loading a level
-Fixed bug where the GUI wouldn't reappear after loading a level

0.11.0 - 12/26/16
(The Inventory Update)
-A few minor drawing fixes in GUIstatusbar
-Added inventory class
-Added inventoryEntry class
-Each "player" now has a unique inventory
-Added gun item
-Added "isStackable" property to items
-Removed keycount display (it's obsolete with the addition of inventory)
-Added inventory GUI
-Added dropping of selected items with spacebar
-Added selecting active item with number keys 0-9
NOTE: Loader does not yet save inventory or varied item types
NOTE: Inventory code is a bit messy. Might be good idea to rewrite item system.

0.11.1 - 12/29/16
-Added very rare cheese
-Added minimap player location indicator
-Added minimap item location indicator

0.12.0 - 12/31/16
(The Gameplay Update)
-Added new chicken entity
-Modified game rendering so that only entities and items within 30 blocks of the player are rendered (speedup)
-Added entities (other than the player) minimap location indicator
-Added very elementary movement for the chicken
-Added new "particle" entity type
-Added SMG weapon item
-Added ability to shoot guns (SMG and pistol); bullets currently go in random directions
-Changed keybindings; space now uses items, Q now drops items
-Pistol shoots one bullet per keypress of space, SMG shoots bullets constantly
-Changed mapbuilding method privacy settings, rewrote QuestMap constructor for cleaner code
-Debug display now indicated number of items, entities, and particles currently on the map